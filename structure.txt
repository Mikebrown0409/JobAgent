enterprise_job_agent/
├── main.py                 # Entry point and CLI interface
├── config.py               # Configuration and environment settings
├── agents/                 # AI Agents using CrewAI
│   ├── __init__.py
│   ├── profile_adapter_agent.py    # Adapts user profiles to job requirements
│   ├── form_analyzer_agent.py      # Analyzes form structure and requirements
│   ├── session_manager_agent.py    # Manages session state, navigation (optional based on final design)
│   └── error_recovery_agent.py     # Handles error recovery
├── core/                   # Core system components
│   ├── __init__.py
│   ├── action_executor.py          # Dispatches actions to handlers
│   ├── action_strategy_selector.py # Selects interaction strategies using LLM
│   ├── action_handlers/          # Handlers for specific action types
│   │   ├── __init__.py
│   │   ├── base_handler.py         # Base class for action handlers
│   │   ├── text_handler.py         # Handles text input fields
│   │   ├── select_handler.py       # Handles <select> dropdowns
│   │   ├── typeahead_handler.py    # Handles typeahead/autocomplete fields
│   │   ├── checkbox_handler.py     # Handles checkboxes and radio buttons
│   │   ├── click_handler.py        # Handles click actions
│   │   └── fileupload_handler.py   # Handles file uploads
│   ├── browser_manager.py          # Manages browser sessions and Playwright page
│   ├── crew_manager.py             # Orchestrates AI agent interactions and workflow
│   ├── diagnostics_manager.py      # Tracks system performance and issues
│   ├── frame_manager.py            # Handles iframe identification and switching
│   ├── job_extractor.py            # Extracts job posting details (if applicable)
│   ├── exceptions.py             # Custom exception classes
│   └── llm_wrapper.py            # Wrapper for LLM interaction (e.g., GeminiWrapper)
├── tools/                  # Specialized tools and utilities used by agents/core components
│   ├── __init__.py
│   ├── data_formatter.py          # Formats data (e.g., for profile mapping)
│   ├── element_selector.py        # Advanced element selection/identification
│   ├── form_interaction.py        # Low-level Playwright interaction utilities
│   └── field_identifier.py        # Utility for identifying field properties (used by FormAnalyzerAgent)
├── tests/                  # Unit and integration tests
│   ├── __init__.py
│   ├── test_job_application.py   # Main test suite
│   ├── test_action_handlers.py   # Tests for individual action handlers
│   └── ... (other test files)
├── utils/                  # General utility functions (optional)
│   └── __init__.py
├── run_outcomes.jsonl      # Log file for structured run results
├── requirements.txt        # Python package dependencies
├── README.md               # Project overview and setup instructions
├── structure.txt           # This file - Representation of the project structure
└── checklist.md            # Development progress checklist

Component Dependencies (High-Level):
-----------------------------------
1.  **main.py**: `config`, `crew_manager`, `browser_manager`
2.  **crew_manager.py**: Orchestrates agents (`FormAnalyzerAgent`, `ProfileAdapterAgent`, `ErrorRecoveryAgent`), `ActionExecutor`, `BrowserManager`, `DiagnosticsManager`, `LLMWrapper`.
3.  **ActionExecutor**: Delegates to `ActionHandlers`, uses `ActionStrategySelector`, `BrowserManager`, `DiagnosticsManager`.
4.  **Action Handlers** (`core/action_handlers/`): Inherit from `BaseActionHandler`. Use `ActionStrategySelector`, `FormInteraction`, `ElementSelector`, `BrowserManager`, `DiagnosticsManager`.
5.  **Agents** (`agents/`): Use `LLMWrapper`, `Tools`, `DiagnosticsManager`. Depend on `CrewManager` for tasks/orchestration.
6.  **Tools** (`tools/`): Used by Agents and Core components. Typically depend on `BrowserManager`, `ElementSelector`.

Data Flow:
---------
1.  `main.py` initiates `CrewManager`.
2.  `CrewManager` navigates (`BrowserManager`).
3.  `CrewManager` invokes `FormAnalyzerAgent` (uses `ElementSelector`, `FieldIdentifier`, `LLMWrapper`).
4.  `CrewManager` invokes `ProfileAdapterAgent` (uses analysis result, profile data, `DataFormatter`, `LLMWrapper`) -> Generates `ActionContext` list.
5.  `CrewManager` invokes `ActionExecutor` with `ActionContext` list.
6.  `ActionExecutor` selects handler based on `ActionContext.field_type`.
7.  Handler potentially calls `ActionStrategySelector` (uses `LLMWrapper`) to choose method.
8.  Handler calls `FormInteraction` or `ElementSelector` (uses `BrowserManager`) to interact with the page.
9.  If error occurs, `CrewManager` invokes `ErrorRecoveryAgent`, attempts recovery plan via `ActionExecutor`.
10. `CrewManager` logs outcome (`run_outcomes.jsonl`) via `DiagnosticsManager`. 